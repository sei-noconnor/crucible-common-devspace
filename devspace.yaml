version: v2beta1
name: crucible-devspace

# This is a list of `pipelines` that DevSpace can execute (you can define your own)
pipelines:
  # You can run this pipeline via `devspace deploy` (or `devspace run-pipeline deploy`)
  deploy:
    run: |-
      run_dependencies --all                            # 1. Deploy any projects this project needs (see "dependencies")
      ensure_pull_secrets --all                         # 2. Ensure pull secrets
      build_images --all -t $(git describe --always)    # 3. Build, tag (git commit hash) and push all images (see "images")
      create_deployments --all                          # 4. Deploy Helm charts and manifests specfied as "deployments"
  # This is the pipeline for the main command: `devspace dev` (or `devspace run-pipeline dev`)
  dev:
    run: |-
      run_dependencies --all       # 1. Deploy any projects this project needs (see "dependencies")
      ensure_pull_secrets --all    # 2. Ensure pull secrets
      create_deployments --all     # 3. Deploy Helm charts and manifests specfied as "deployments"
      start_dev app                # 4. Start dev mode "app" (see "dev" section)
  deploy-ordered: |-
    run_dependencies --all
    create_deployments postgres
    create_deployments cert-manager
    create_deployments root-ca
    create_deployments cert-manager-resources
    create_deployments keycloak keycloak-config
  
  redeploy-keycloak: |-
    create_deployments keycloak keycloak-config

# This is a list of `deployments` that DevSpace can create for this project
deployments:
  postgres:
    helm:
      chart:
        name: postgresql
        repo: https://charts.bitnami.com/bitnami
        version: 12.8.0
      values:
        global:
          postgresql:
            auth:
              postgresPassword: "${POSTGRES_PASS}"
  cert-manager:
    helm:
      chart: 
        name: cert-manager
        repo: https://charts.jetstack.io
        version: v1.12.3
      values:
        installCRDs: true
  cert-manager-resources:
    kubectl:
      kustomize: true
      manifests: 
      - development/deps/cert-manager/kustomize
  root-ca:
    kubectl:
      kustomize: true
      manifests:
      - development
  keycloak:
    helm:
      chart:
        name: keycloak
        repo: https://charts.bitnami.com/bitnami
        version: 15.1.8
      valuesFiles:
        - ./development/deps/keycloak/values/keycloak.values.yaml
      values:
        auth:
          adminUser: admin
          adminPassword: "${ADMIN_PASS}"
        proxyAddressForwarding: true
        ingress:
          enabled: true
          hostname: ${DOMAIN}
          annotations:
            kubernetes.io/ingress.class: nginx
            cert-manager.io/cluster-issuer: ca-issuer
          tls: true
        extraEnvVars:
          - name: KEYCLOAK_ADMIN
            value: "admin"
          - name: KEYCLOAK_ADMIN_PASSWORD
            value: "${ADMIN_PASS}"
          - name: KC_HTTP_RELATIVE_PATH
            value: "/keycloak/"
          - name: KC_DB
            value: "postgres"
          - name: KC_DB_USERNAME
            value: "postgres"
          - name: KC_DB_PASSWORD
            value: "${POSTGRES_PASS}"
          - name: KC_DB_URL_HOST
            value: "${POSTGRES_SERVER}"
          - name: KC_DB__URL_PORT
            value: "5432"
          - name: KC_DB_URL_DATABASE
            value: "keycloak"
          - name: KC_HOSTNAME
            value: ${DOMAIN}
          - name: KC_HOSTNAME_STRICT
            value: "false"
          - name: KC_HOSTNAME_STRICT_HTTPS
            value: "false"
          - name: KC_HTTPS_CLIENT_AUTH
            value: "request"
          - name: CUSTOM_REGISTRATION_CONFIG
            value: /opt/bitnami/keycloak/conf/customreg.yaml
          - name: PROXY_ADDRESS_FORWARDING
            value: "true"
          - name: KC_LOG_LEVEL
            value: "org.keycloak.events:DEBUG,org.infinispan:INFO,org.jgroups:INFO"
          - name: KC_METRICS_ENABLED
            value: "true"
          - name: DOMAIN
            value: ${DOMAIN}"
          # - name: KC_HTTPS_TRUST_STORE_FILE
          #   value: /opt/bitnami/keycloak/spi-certs/truststore.jks
          # - name: KC_HTTPS_TRUST_STORE_PASSWORD
          #   value: "password"
        externalDatabase:
          host: "${POSTGRES_SERVER}"
          port: 5432
          user: "${POSTGRES_USER}"
          database: keycloak
          password: "${POSTGRES_PASS}"
          existingSecret: ""
          existingSecretPasswordKey: ""
  keycloak-config:
    kubectl:
      kustomize: true
      manifests:
      - development/deps/keycloak/kustomize

  
  # app:
  #   # This deployment uses `helm` but you can also define `kubectl` deployments or kustomizations
  #   helm:
  #     # We are deploying this project with the Helm chart you provided
  #     chart:
  #       name: component-chart
  #       repo: https://charts.devspace.sh
  #     # Under `values` we can define the values for this Helm chart used during `helm install/upgrade`
  #     # You may also use `valuesFiles` to load values from files, e.g. valuesFiles: ["values.yaml"]
  #     values:
  #       containers:
  #         - {}

# This is a list of `dev` containers that are based on the containers created by your deployments
# dev:
#   app:
#     # Replace the container image with this dev-optimized image (allows to skip image building during development)
#     devImage: ghcr.io/loft-sh/devspace-containers/alpine:3
#     # Sync files between the local filesystem and the development container
#     sync:
#       - path: ./
#     # Open a terminal and use the following command to start it
#     terminal:
#       command: ./devspace_start.sh
#     # Inject a lightweight SSH server into the container (so your IDE can connect to the remote dev env)
#     ssh:
#       enabled: true
#     # Make the following commands from my local machine available inside the dev container
#     proxyCommands:
#       - command: devspace
#       - command: kubectl
#       - command: helm
#       - gitCredentials: true

# # Use the `commands` section to define repeatable dev workflows for this project 
# commands:
#   migrate-db:
#     command: |-
#       echo 'This is a cross-platform, shared command that can be used to codify any kind of dev task.'
#       echo 'Anyone using this project can invoke it via "devspace run migrate-db"'

# Define dependencies to other projects with a devspace.yaml
# dependencies:
#   api:
#     git: https://...  # Git-based dependencies
#     tag: v1.0.0
#   ui:
#     path: ./ui        # Path-based dependencies (for monorepos)
# dependencies:
#   cert-manager:
#     path: ./development/deps/cert-manager
#   postgres:
#     path: ./development/deps/postgres
vars:
  DEVSPACE_ENV_FILE: ".env"

commands:
  prep:
    ./development/scripts/prep.sh $PWD
  bootstrap:
    ./development/scripts/bootstrap.sh $PWD
  clean:
    ./development/scripts/clean.sh $PWD
  

