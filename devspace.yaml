version: v2beta1
name: crucible-devspace

# This is a list of `pipelines` that DevSpace can execute (you can define your own)
pipelines:
  # You can run this pipeline via `devspace deploy` (or `devspace run-pipeline deploy`)
  deploy:
    run: |-
      run_dependencies --all                            # 1. Deploy any projects this project needs (see "dependencies")
      ensure_pull_secrets --all                         # 2. Ensure pull secrets
      run_pipelines deploy-ordered
      # build_images --all -t $(git describe --always)    # 3. Build, tag (git commit hash) and push all images (see "images")
      # create_deployments --all                          # 4. Deploy Helm charts and manifests specfied as "deployments"
  # This is the pipeline for the main command: `devspace dev` (or `devspace run-pipeline dev`)
  dev:
    run: |-
      run_dependencies --all       # 1. Deploy any projects this project needs (see "dependencies")
      ensure_pull_secrets --all    # 2. Ensure pull secrets
      create_deployments --all     # 3. Deploy Helm charts and manifests specfied as "deployments"
      start_dev app                # 4. Start dev mode "app" (see "dev" section)
  
  deploy-ordered: |-
    run_dependencies --all
    create_deployments ingress
    create_deployments postgres
    create_deployments cert-manager
    create_deployments root-ca
    create_deployments cert-manager-resources
    create_deployments keycloak keycloak-inline-config
    create_deployments keycloak-config
  
# This is a list of `deployments` that DevSpace can create for this project
deployments:
  ingress:
    kubectl:
      kustomize: false
      manifests:
        - development/deps/ingress-nginx
  postgres:
    helm:
      chart:
        name: postgresql
        repo: https://charts.bitnami.com/bitnami
        version: 12.8.0
      values:
        global:
          postgresql:
            auth:
              postgresPassword: "${POSTGRES_PASS}"
      valuesFiles:
        - development/deps/postgres/values/postgresql.values.yaml
  cert-manager:
    helm:
      chart: 
        name: cert-manager
        repo: https://charts.jetstack.io
        version: v1.12.3
      values:
        installCRDs: true
  cert-manager-resources:
    kubectl:
      kustomize: true
      manifests: 
      - development/deps/cert-manager/kustomize
  root-ca:
    kubectl:
      kustomize: true
      manifests:
      - development
  keycloak:
    helm:
      chart:
        name: keycloak
        repo: https://charts.bitnami.com/bitnami
        version: 15.1.8
      valuesFiles:
        - ./development/deps/keycloak/values/keycloak.values.yaml
      values:
        proxyAddressForwarding: true
        ingress:
          enabled: true
          hostname: ${DOMAIN}
          annotations:
            kubernetes.io/ingress.class: nginx
            cert-manager.io/cluster-issuer: ca-issuer
          tls: true
        extraEnvVars:
          - name: KC_HTTP_RELATIVE_PATH
            value: "/keycloak/"
          - name: KC_DB
            value: "postgres"
          - name: KC_DB_USERNAME
            value: "postgres"
          - name: KC_DB_PASSWORD
            value: "${POSTGRES_PASS}"
          - name: KC_DB_URL_HOST
            value: "${POSTGRES_SERVER}"
          - name: KC_DB__URL_PORT
            value: "5432"
          - name: KC_DB_URL_DATABASE
            value: "keycloak"
          - name: KC_HOSTNAME
            value: ${DOMAIN}
          - name: KC_HOSTNAME_STRICT
            value: "false"
          - name: KC_HOSTNAME_STRICT_HTTPS
            value: "false"
          - name: KC_HTTPS_CLIENT_AUTH
            value: "request"
          - name: CUSTOM_REGISTRATION_CONFIG
            value: /opt/bitnami/keycloak/conf/customreg.yaml
          - name: PROXY_ADDRESS_FORWARDING
            value: "true"
          - name: KC_LOG_LEVEL
            value: "org.keycloak.events:DEBUG,org.infinispan:INFO,org.jgroups:INFO"
          - name: KC_METRICS_ENABLED
            value: "true"
          - name: DOMAIN
            value: ${DOMAIN}
          # - name: KC_HTTPS_TRUST_STORE_FILE
          #   value: /opt/bitnami/keycloak/spi-certs/truststore.jks
          # - name: KC_HTTPS_TRUST_STORE_PASSWORD
          #   value: "password"
        externalDatabase:
          host: "${POSTGRES_SERVER}"
          port: 5432
          user: "${POSTGRES_USER}"
          database: keycloak
          password: "${POSTGRES_PASS}"
          existingSecret: ""
          existingSecretPasswordKey: ""
  keycloak-inline-config:
    kubectl:
      inlineManifest: |-
        apiVersion: v1
        kind: Secret
        metadata:
          name: keycloak-import
        stringData:
          quarkus.properties: |-
              quarkus.http.non-application-root-path=/
              # custom redirects
              quarkus.kc-routing.path-redirect./=/${OAUTH_PROVIDER}/${OAUTH_AUTHORITY_URL}/account
              quarkus.kc-routing.path-redirect./${OAUTH_PROVIDER}=/${OAUTH_PROVIDER}/${OAUTH_AUTHORITY_URL}/account
              quarkus.kc-routing.path-redirect./${OAUTH_PROVIDER}/register=/${OAUTH_PROVIDER}/${OAUTH_AUTHORITY_URL}/protocol/openid-connect/registrations?client_id=account&response_type=code
              quarkus.kc-routing.path-prefix./oauth/authorize=/${OAUTH_PROVIDER}/${OAUTH_AUTHORITY_URL}/protocol/openid-connect/auth
              quarkus.kc-routing.path-filter./api/v4/user=/${OAUTH_PROVIDER}/${OAUTH_AUTHORITY_URL}/protocol/openid-connect/userinfo
              quarkus.kc-routing.path-filter./oauth/token=/${OAUTH_PROVIDER}/${OAUTH_AUTHORITY_URL}/protocol/openid-connect/token
              # block metrics and health enpoints from being exposed through the istio ingress
              quarkus.kc-routing.path-recursive-block./${OAUTH_PROVIDER}/metrics=8443
              quarkus.kc-routing.path-recursive-block./${OAUTH_PROVIDER}/health=8443
  keycloak-config:
    kubectl:
      kustomize: true
      manifests:
      - development/deps/keycloak/kustomize

# This is a list of `dev` containers that are based on the containers created by your deployments
# dev:
#   api:
#     # Replace the container image with this dev-optimized image (allows to skip image building during development)
#     devImage: mcr.microsoft.com/dotnet/sdk:6.0
#     # Sync files between the local filesystem and the development container
#     sync:
#       - path: ./player-api
#     # Open a terminal and use the following command to start it
#     terminal:
#       command: ./devspace_start.sh
#     # Inject a lightweight SSH server into the container (so your IDE can connect to the remote dev env)
#     ssh:
#       enabled: true
#     # Make the following commands from my local machine available inside the dev container
#     proxyCommands:
#       - command: devspace
#       - command: kubectl
#       - command: helm
#       - gitCredentials: true

vars:
  DEVSPACE_ENV_FILE: ".env"

commands:
  prep:
    ./development/scripts/prep.sh $PWD
  bootstrap:
    ./development/scripts/bootstrap.sh $PWD
  clean:
    ./development/scripts/clean.sh $PWD

functions: 
  generate_ssl: |-
    dir=$1
    echo "generate ssl"
    echo "Working Directory is: $dir"
    # Create ssl root certificate
    mkdir -p $dir/development/ssl

    echo "$(openssl version)"

    openssl genrsa -out $dir/development/ssl/tls.key 2048
    openssl req -x509 -new -nodes -key $dir/development/ssl/tls.key \
        -days 3650 -sha256 -out $dir/development/ssl/tls.crt -subj "/CN=crucible-ca"
    cp $dir/development/ssl/tls.crt $dir/development/ssl/root-ca.pem
  bootstrap_cluster: |-
    dir=$1
    echo "Working Directory is: $dir"
    kind_bin=$(which kind)
    kubectl_bin=$(which kubectl)
    envsubst < $dir/development/bootstrap-kind-config.yaml | $kind_bin create cluster --config - 
    #$kubectl_bin apply -f $dir/development/deps/ingress-nginx/nginx-ingress.yaml
    echo "devspace context: ${DEVSPACE_CONTEXT}"
    sleep 5

